#===-- Makefile.rules - Common make rules for LLVM ---------*- Makefile -*--===#
#
#                     The LLVM Compiler Infrastructure
#
# This file was developed by the LLVM research group and is distributed under
# the University of Illinois Open Source License. See LICENSE.TXT for details.
# 
#===------------------------------------------------------------------------===#
#
# This file is included by all of the LLVM makefiles.  For details on how to use
# it properly, please see the document MakefileGuide.html in the docs directory.
#
#===-----------------------------------------------------------------------====

#
# Set the VPATH so that we can find source files.
#
VPATH=$(BUILD_SRC_DIR)

###############################################################################
# TARGETS: Define standard targets that can be invoked
###############################################################################

#--------------------------------------------------------------------
# Define the various target sets
#--------------------------------------------------------------------
RECURSIVE_TARGETS := all clean check install uninstall
LOCAL_TARGETS     := all-local clean-local check-local install-local printvars\
                     uninstall-local
TOPLEV_TARGETS    := dist dist-check dist-clean
INTERNAL_TARGETS  := preconditions

#--------------------------------------------------------------------
# Mark all of these targets as phony to avoid implicit rule search
#--------------------------------------------------------------------
.PHONY: $(RECURSIVE_TARGETS) $(LOCAL_TARGETS) $(TOP_TARGETS) $(INTERNAL_TARGETS)

#--------------------------------------------------------------------
# Make sure all the user-target rules are double colon rules and that
# the preconditions are run first.
#--------------------------------------------------------------------

all :: all-local
check:: check-local
clean:: clean-local 
install :: install-local
uninstall :: uninstall-local

all-local :: preconditions
clean-local :: preconditions
check-local :: all-local
install-local :: all-local 
printvars :: preconditions
uninstall-local :: preconditions

dist:: preconditions
dist-check:: preconditions
dist-clean:: preconditions

###############################################################################
# SUFFIXES: Reset the list of suffixes we know how to build
###############################################################################
.SUFFIXES:
.SUFFIXES: .c .cpp .h .hpp .y .l .lo .o .a $(SHLIBEXT) .bc .td .ps .dot $(SUFFIXES)

###############################################################################
# VARIABLES: Set up various variables based on configuration data
###############################################################################

#--------------------------------------------------------------------
# Variables derived from configuration we are building
#--------------------------------------------------------------------

ifdef ENABLE_PROFILING
  CONFIGURATION := Profile
  CXXFLAGS += -O3 -DNDEBUG -felide-constructors -finline-functions -pg
  CFLAGS   += -O3 -DNDEBUG -pg
  LDFLAGS  += -O3 -DNDEBUG -pg 
else
  ifdef ENABLE_OPTIMIZED
    CONFIGURATION := Release
    CXXFLAGS  += -O3 -DNDEBUG -finline-functions -felide-constructors -fomit-frame-pointer
    CFLAGS    += -O3 -DNDEBUG -fomit-frame-pointer
    LDFLAGS   += -O3 -DNDEBUG 
  else
    CONFIGURATION := Debug
    CXXFLAGS += -g -D_DEBUG 
    CFLAGS   += -g -D_DEBUG
    LDFLAGS  += -g -D_DEBUG 
    KEEP_SYMBOLS := 1
  endif
endif

ARFLAGS := cru

#--------------------------------------------------------------------
# Directory locations
#--------------------------------------------------------------------
OBJDIR      := $(BUILD_OBJ_DIR)/$(CONFIGURATION)
LIBDIR      := $(BUILD_OBJ_ROOT)/lib/$(CONFIGURATION)
TOOLDIR     := $(BUILD_OBJ_ROOT)/tools/$(CONFIGURATION)
LLVMLIBDIR  := $(LLVM_OBJ_ROOT)/lib/$(CONFIGURATION)
LLVMTOOLDIR := $(LLVM_OBJ_ROOT)/tools/$(CONFIGURATION)

#--------------------------------------------------------------------
# Full Paths To Compiled Tools and Utilities
#--------------------------------------------------------------------
LIBTOOL  := $(LLVM_OBJ_ROOT)/mklib
LLVMAS   := $(LLVMTOOLDIR)/llvm-as$(EXEEXT)
BURG     := $(LLVMTOOLDIR)/burg$(EXEEXT)
TBLGEN   := $(LLVMTOOLDIR)/tblgen$(EXEEXT)
GCCLD    := $(LLVMTOOLDIR)/gccld$(EXEEXT)
LLVMGCC  := PATH=$(LLVMTOOLDIR):$(PATH) $(LLVMGCCDIR)/bin/gcc
LLVMGXX  := PATH=$(LLVMTOOLDIR):$(PATH) $(LLVMGCCDIR)/bin/g++

# Need a better way to compute this.
LLVMGCCLIBDIR := $(dir $(shell $(LLVMGCC) -print-file-name=libgcc.a))/

#--------------------------------------------------------------------
# Adjust to user's request
#--------------------------------------------------------------------

# Adjust LIBTOOL options for shared libraries, or not.
ifndef SHARED_LIBRARY
  LIBTOOL += --tag=disable-shared
else
  LDFLAGS += -rpath $(LIBDIR)
endif

# Adjust settings for verbose mode
ifndef VERBOSE
  VERB := @
  LIBTOOL += --silent
  AR += >/dev/null 2>/dev/null
endif

# By default, strip symbol information from executable
ifndef KEEP_SYMBOLS
  STRIP = $(PLATFORMSTRIPOPTS)
  STRIP_WARN_MSG = "(without symbols)"
endif

# Adjust linker flags for building an executable
ifdef TOOLNAME
  LDFLAGS += -rpath $(TOOLDIR) -export-dynamic $(TOOLLINKOPTS)
endif

# Use TOOLLINKOPTSB to pass options to the linker like library search 
# path etc.
# Note that this is different from TOOLLINKOPTS, these options
# are passed to the linker *before* the USEDLIBS options are passed.
# e.g. usage TOOLLINKOPTSB =  -L/home/xxx/lib
ifdef TOOLLINKOPTSB
LDFLAGS += $(TOOLLINKOPTSB)
endif

#----------------------------------------------------------
# Options To Invoke Tools
#----------------------------------------------------------

CompileCommonOpts := -Wall -W -Wwrite-strings -Wno-unused

LDFLAGS  += -L$(LIBDIR) -L$(LLVMLIBDIR)
CPPFLAGS += -I$(BUILD_OBJ_DIR) \
            -I$(BUILD_SRC_DIR) \
            -I$(BUILD_SRC_ROOT)/include \
            -I$(BUILD_OBJ_ROOT)/include \
            -I$(LLVM_OBJ_ROOT)/include \
            -I$(LLVM_SRC_ROOT)/include \
            -D_GNU_SOURCE -D__STDC_LIMIT_MACROS

Compile.C     = $(CC) $(CPPFLAGS) $(CompileCommonOpts) -c $(CFLAGS)
Compile.CXX   = $(CXX) $(CPPFLAGS) $(CompileCommonOpts) $(CXXFLAGS) -c
LTCompile.C   = $(LIBTOOL) --mode=compile $(Compile.C)
LTCompile.CXX = $(LIBTOOL) --tag=CXX --mode=compile $(Compile.CXX)
BCCompile.CXX = $(LLVMGXX) $(CPPFLAGS) $(CompileCommonOpts) $(CXXFLAGS) -c
BCCompile.C   = $(LLVMGCC) $(CPPFLAGS) $(CompileCommonOpts) $(CFLAGS) -c
Link          = $(LIBTOOL) --tag=CXX --mode=link $(CXX) $(CPPFLAGS) \
                $(CompileCommonOpts) $(LDFLAGS) $(STRIP)
Relink        = $(LIBTOOL) --tag=CXX --mode=link $(CXX)
BCLinkLib     = $(LLVMGCC) -shared -nostdlib
Burg          = $(BURG) -I $(BUILD_SRC_DIR)
TableGen      = $(TBLGEN) -I $(BUILD_SRC_DIR)
Archive       = $(AR) $(ARFLAGS)
ifdef RANLIB
Ranlib        = $(RANLIB)
else
Ranlib        = ranlib
endif

#----------------------------------------------------------
# Get the list of source files
#----------------------------------------------------------
ifndef SOURCES
SOURCES  := $(notdir $(wildcard $(BUILD_SRC_DIR)/*.cpp \
            $(BUILD_SRC_DIR)/*.cc $(BUILD_SRC_DIR)/*.c $(BUILD_SRC_DIR)/*.y \
            $(BUILD_SRC_DIR)/*.l))
endif

ifdef BUILT_SOURCES
SOURCES += $(filter %.cpp %.c %.cc %.y %.l,$(BUILT_SOURCES))
endif

#----------------------------------------------------------
# Types of objects that can be built from sources
#----------------------------------------------------------
BASENAME_SOURCES := $(sort $(basename $(SOURCES)))
ObjectsO  := $(BASENAME_SOURCES:%=$(OBJDIR)/%.o)
ObjectsLO := $(BASENAME_SOURCES:%=$(OBJDIR)/%.lo)
ObjectsBC := $(BASENAME_SOURCES:%=$(OBJDIR)/%.bc)


###############################################################################
# DIRECTORIES: Handle recursive descent of directory structure
###############################################################################

#---------------------------------------------------------
# Handle the DIRS options for sequential construction
#---------------------------------------------------------

ifdef DIRS
$(RECURSIVE_TARGETS)::
	$(VERB) for dir in $(DIRS); do \
	  if [ ! -f $$dir/Makefile ]; then \
	    $(MKDIR) $$dir; \
	    cp $(BUILD_SRC_DIR)/$$dir/Makefile $$dir/Makefile; \
	  fi; \
	  ($(MAKE) -C $$dir $@ $(MFLAGS)) || exit 1; \
	done
endif

#---------------------------------------------------------
# Handle the EXPERIMENTAL_DIRS options ensuring success
# after each directory is built.
#---------------------------------------------------------
ifdef EXPERIMENTAL_DIRS
$(RECURSIVE_TARGETS)::
	$(VERB) for dir in $(EXPERIMENTAL_DIRS); do \
	  if [ ! -f $$dir/Makefile ]; then \
	    $(MKDIR) $$dir; \
	    cp $(BUILD_SRC_DIR)/$$dir/Makefile $$dir/Makefile; \
	  fi; \
	  $(MAKE) -C $$dir $@ $(MFLAGS) || exit 0; \
	done
endif

#---------------------------------------------------------
# Handle the PARALLEL_DIRS options for parallel construction
#---------------------------------------------------------
ifdef PARALLEL_DIRS

# Unfortunately, this list must be maintained if new 
# recursive targets are added.
all      :: $(addsuffix /.makeall     , $(PARALLEL_DIRS))
clean    :: $(addsuffix /.makeclean   , $(PARALLEL_DIRS))
check    :: $(addsuffix /.makecheck   , $(PARALLEL_DIRS))
install  :: $(addsuffix /.makeinstall , $(PARALLEL_DIRS))
uninstall:: $(addsuffix /.makeuninstall,$(PARALLEL_DIRS))

Parallel_Targets := $(foreach T,$(RECURSIVE_TARGETS),%/.make$(T))

$(Parallel_Targets) :
	$(VERB) if [ ! -f $(@D)/Makefile ]; then \
	  $(MKDIR) $(@D); \
	  cp $(BUILD_SRC_DIR)/$(@D)/Makefile $(@D)/Makefile; \
	fi; \
	$(MAKE) -C $(@D) $(subst $(@D)/.make,,$@) $(MFLAGS)
endif

#---------------------------------------------------------
# Handle the OPTIONAL_DIRS options for directores that may
# or may not exist.
#---------------------------------------------------------
ifdef OPTIONAL_DIRS
$(RECURSIVE_TARGETS)::
	$(VERB) for dir in $(OPTIONAL_DIRS); do \
	  if [ -d $(BUILD_SRC_DIR)/$$dir ]; then\
	    if [ ! -f $$dir/Makefile ]; then \
	      $(MKDIR) $$dir; \
	      cp $(BUILD_SRC_DIR)/$$dir/Makefile $$dir/Makefile; \
	    fi; \
	    ($(MAKE) -C$$dir $@ $(MFLAGS)) || exit 1; \
	  fi \
	done
endif

#---------------------------------------------------------
# Handle the CONFIG_FILES options
#---------------------------------------------------------
ifdef CONFIG_FILES

.PHONY: install-config-dir

install:: install-config-dir 

install-config-dir: $(sysconfdir) $(CONFIG_FILES)
	$(VERB)$(ECHO) Installing Configuration Files To $(sysconfdir)
	$(VERB)for file in $(CONFIG_FILES); do \
		$(INSTALL) $(BUILD_SRC_DIR)/$${file} $(sysconfdir) ; \
	done

$(sysconfdir):
	$(MKDIR) $(sysconfdir)

endif

###############################################################################
# Library Build Rules: Four ways to build a library
###############################################################################


# if we're building a library ...
ifdef LIBRARYNAME

# Make sure there isn't any extranous whitespace on the LIBRARYNAME option
LIBRARYNAME := $(strip $(LIBRARYNAME))
LIBNAME_LA := $(LIBDIR)/lib$(LIBRARYNAME).la
LIBNAME_A  := $(LIBDIR)/lib$(LIBRARYNAME).a
LIBNAME_O  := $(LIBDIR)/$(LIBRARYNAME).o
LIBNAME_BC := $(LIBDIR)/lib$(LIBRARYNAME).bc

#---------------------------------------------------------
# Shared Library Targets:
#   If the user asked for a shared library to be built
#   with the SHARED_LIBRARY variable, then we provide
#   targets for building them.
#---------------------------------------------------------
ifdef SHARED_LIBRARY

all-local:: $(LIBNAME_LA)

$(LIBNAME_LA): $(BUILT_SOURCES) $(ObjectsLO) $(LIBDIR)/.dir
	@$(ECHO) Linking shared library $(notdir $@)
	$(VERB) $(Link) -o $@ $(ObjectsLO)
	$(VERB) $(LIBTOOL) --mode=install $(INSTALL) $@ $(LIBDIR)

clean-local::
	$(VERB) $(RM) -f $(LIBNAME_LA)

install-local:: $(DESTDIR)$(libdir)/lib$(LIBRARYNAME)$(SHLIBEXT)

$(DESTDIR)/lib/lib$(LIBRARYNAME)$(SHLIBEXT): $(LIBNAME_LA)
	@$(ECHO) Installing shared library $(notdir $@)
	$(VERB) $(MKDIR) $(DESTDIR)
	$(VERB) $(LIBTOOL) --mode=install $(INSTALL) $(LIBNAME_LA) $(DESTDIR)$(libdir)/lib$(LIBRARYNAME)$(SHLIBEXT)
	$(VERB) $(LIBTOOL) --finish $(DESTDIR)$(libdir)
endif

#---------------------------------------------------------
# Bytecode Library Targets:
#   If the user asked for a bytecode library to be built
#   with the BYTECODE_LIBRARY variable, then we provide 
#   targets for building them.
#---------------------------------------------------------
ifdef BYTECODE_LIBRARY

ifdef EXPORTED_SYMBOL_LIST
  BCLinkLib += -Xlinker -internalize-public-api-list=$(EXPORTED_SYMBOL_LIST)
else
  ifdef EXPORTED_SYMBOL_FILE
    BCLinkLib += -Xlinker -internalize-public-api-file=$(EXPORTED_SYMBOL_FILE)
  else
    BCLinkLib += -Xlinker -disable-internalize
  endif
endif

all-local:: $(LIBNAME_BC)

$(LIBNAME_BC): $(BUILT_SOURCES) $(ObjectsBC) $(LIBDIR)/.dir
	@$(ECHO) Linking bytecode library $(notdir $@)
	$(VERB) $(BCLinkLib) -o $@ $(ObjectsBC)

clean-local::
	$(VERB) $(RM) -f $(LIBNAME_BC)

install-local:: $(DESTDIR)$(bytecode_libdir)/lib$(LIBRARYNAME).bc

$(DESTDIR)$(bytecode_libdir)/lib$(LIBRARYNAME).bc: $(LIBNAME_BC) $(DESTDIR)$(bytecode_libdir)
	@$(ECHO) Installing bytecode library $(notdir $@)
	$(VERB)$(INSTALL) $< $@

endif

# Does the library want a .o version built?
ifndef DONT_BUILD_RELINKED
all-local:: $(LIBNAME_O)

$(LIBNAME_O): $(BUILT_SOURCES) $(ObjectsO) $(LIBDIR)/.dir
	@$(ECHO) Linking object library $(notdir $@)
	$(VERB) $(Relink) -o $@ $(ObjectsO)

install-local:: $(DESTDIR)$(libdir)/$(LIBRARYNAME).o

$(DESTDIR)$(libdir)/$(LIBRARYNAME).o: $(LIBNAME_O)
	@$(ECHO) Installing object library $(notdir $@)
	$(VERB) $(MKDIR) $(DESTDIR)$(libdir)
	$(VERB) $(LIBTOOL) --mode=install $(INSTALL) $(LIBNAME_O) $(DESTDIR)$(libdir)/$(LIBRARYNAME).o

clean-local::
	$(VERB) $(RM) -f $(LIBNAME_O)

endif

# Does the library want an archive version built?
ifdef BUILD_ARCHIVE
all-local:: $(LIBNAME_A)

$(LIBNAME_A): $(BUILT_SOURCES) $(ObjectsO) $(LIBDIR)/.dir
	@$(ECHO) Building archive library $(notdir $@)
	$(VERB)$(RM) -f $@
	$(VERB) $(Archive) $@ $(ObjectsO)
	$(VERB) $(Ranlib) $@

clean-local::
	$(VERB) $(RM) -f $(LIBNAME_A)

install-local:: $(DESTDIR)$(libdir)/lib$(LIBRARYNAME).a

$(DESTDIR)$(libdir)/lib$(LIBRARYNAME).a: $(LIBNAME_A)
	@$(ECHO) Installing archive library $(notdir $@)
	$(MKDIR) $(DESTDIR)$(libdir)
	$(VERB) $(LIBTOOL) --mode=install $(INSTALL) $(LIBNAME_A) $(DESTDIR)$(libdir)/lib$(LIBRARYNAME).a
endif

# if LIBRARYNAME
endif 

#------------------------------------------------------------------------
# Handle the TOOLNAME option - used when building tool executables...
#------------------------------------------------------------------------
#
# The TOOLNAME option should be used with a USEDLIBS variable that tells the
# libraries (and the order of the libs) that should be linked to the
# tool. USEDLIBS should contain a list of library names (some with .a extension)
# that are automatically linked in as .o files unless the .a suffix is added.
#
ifdef TOOLNAME

# TOOLLINKOPTSB to pass options to the linker like library search path etc
# Note that this is different from TOOLLINKOPTS, these options
# are passed to the linker *before* the USEDLIBS options are passed.
# e.g. usage TOOLLINKOPTSB =  -L/home/xxx/lib
ifdef TOOLLINKOPTSB
Link    += $(TOOLLINKOPTSB) 
endif

# TOOLEXENAME* - These compute the output filenames to generate...
TOOLEXENAME := $(TOOLDIR)/$(TOOLNAME)

# USED_LIBS_OPTIONS - Compute the options line that add -llib1 -llib2, etc.
PROJ_LIBS_OPTIONS := $(patsubst %.a.o, -l%, $(addsuffix .o, $(USEDLIBS)))
PROJ_LIBS_OPTIONS := $(patsubst %.o, $(LIBDIR)/%.o,  $(PROJ_LIBS_OPTIONS))
LLVM_LIBS_OPTIONS := $(patsubst %.a.o, -l%, $(addsuffix .o, $(LLVMLIBS)))
LLVM_LIBS_OPTIONS := $(patsubst %.o, $(LLVMLIBDIR)/%.o, $(LLVM_LIBS_OPTIONS))

PROJ_USED_LIBS    := $(patsubst %.a.o, lib%.a, $(addsuffix .o, $(USEDLIBS)))
LLVM_USED_LIBS    := $(patsubst %.a.o, lib%.a, $(addsuffix .o, $(LLVMLIBS)))
PROJ_LIBS_PATHS   := $(addprefix $(LIBDIR)/,$(PROJ_USED_LIBS))
LLVM_LIBS_PATHS   := $(addprefix $(LLVMLIBDIR)/,$(LLVM_USED_LIBS))

LINK_OPTS := $(TOOLLINKOPTS) $(PROJ_LIBS_OPTIONS) $(LLVM_LIBS_OPTIONS)

#
# Libtool link options:
#	Ensure that all binaries have their symbols exported so that they can
#	by dlsym'ed.
#

# Handle compression libraries automatically
ifeq ($(HAVE_BZIP2),1)
LIBS += -lbz2
endif
ifeq ($(HAVE_ZLIB),1)
LIBS += -lz
endif

# Tell make that we need to rebuild subdirectories before we can link the tool.
# This affects things like LLI which has library subdirectories.
$(LIBS): $(addsuffix /.makeall, $(PARALLEL_DIRS))

all-local::   $(TOOLEXENAME)

clean-local::
	$(VERB) $(RM) -f $(TOOLEXENAME)

$(TOOLEXENAME): $(BUILT_SOURCES) $(ObjectsO) $(PROJ_LIBS_PATHS) $(LLVM_LIBS_PATHS) $(TOOLDIR)/.dir
	@$(ECHO) Linking $(CONFIGURATION) executable $(TOOLNAME) $(STRIP_WARN_MSG)
	$(VERB) $(Link) -o $@ $(ObjectsO) $(PROJ_LIBS_OPTIONS) $(LLVM_LIBS_OPTIONS) $(LIBS)
	@$(ECHO) ======= Finished linking $(CONFIGURATION) executable $(TOOLNAME) $(STRIP_WARN_MSG) 

install-local:: $(TOOLEXENAME)
	@$(ECHO) Installing $(TOOLNAME)
	$(VERB) $(INSTALL) $(TOOLEXENAME) $(DESTDIR)/bin
endif

ifndef DISABLE_AUTO_DEPENDENCIES

# Create .lo files in the OBJDIR directory from the .cpp and .c files...
ifdef SHARED_LIBRARY

$(OBJDIR)/%.lo $(OBJDIR)/%.o: %.cpp $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Shared Library"
	$(VERB) if $(LTCompile.CXX) -MD -MT $@ -MP -MF $(OBJDIR)/$*.LACXXd $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.LACXXd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.LACXXd"; exit 1; fi

$(OBJDIR)/%.lo $(OBJDIR)/%.o: %.c $(OBJDIR)/.dir 
	@$(ECHO) "Compiling $(CONFIGURATION) $*.c For Shared Library"
	$(VERB) if $(LTCompile.C) -MD -MT $@ -MP -MF $(OBJDIR)/$*.LACd $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.LACd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.LACd"; exit 1; fi

else

$(OBJDIR)/%.o: %.cpp $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Archive"
	$(VERB) if $(Compile.CXX) -MD -MT $@ -MP -MF $(OBJDIR)/$*.CXXd $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.CXXd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.CXXd"; exit 1; fi

$(OBJDIR)/%.o: %.c $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.c For Archive"
	$(VERB) if $(Compile.C) -MD -MT $@ -MP -MF $(OBJDIR)/$*.Cd $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.Cd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.Cd"; exit 1; fi

endif

# Create .bc files in the OBJDIR directory from .cpp and .c files...
$(OBJDIR)/%.bc: %.cpp $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp to bytecode"
	$(VERB) if $(BCCompile.CXX) -MD -MT $@ -MP -MF "$(OBJDIR)/$*.BCCXXd" $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.BCCXXd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.BCCXXd"; exit 1; fi

$(OBJDIR)/%.bc: %.c $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.c to bytecode"
	$(VERB) if $(BCCompile.C) -MD -MT $@ -MP -MF "$(OBJDIR)/$*.BCCd" $< -o $@ ; \
	then $(MV) -f "$(OBJDIR)/$*.BCCd" "$(OBJDIR)/$*.d"; \
        else $(RM) -f "$(OBJDIR)/$*.BCCd"; exit 1; fi

else

ifdef SHARED_LIBRARY

$(OBJDIR)/%.lo $(OBJDIR)/%.o: %.cpp $(OBJDIR)/.dir 
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Shared Library"
	$(LTCompile.CXX) $< -o $@ 

$(OBJDIR)/%.lo $(OBJDIR)/%.o: %.c $(OBJDIR)/.dir 
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Shared Library"
	$(LTCompile.C) $< -o $@ 

else

$(OBJDIR)/%.o: %.cpp $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Archive"
	$(Compile.CXX) $< -o $@ 

$(OBJDIR)/%.o: %.c $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp For Archive"
	$(Compile.C) $< -o $@ 
endif

# Create .bc files in the OBJDIR directory from .cpp and .c files...
$(OBJDIR)/%.bc: %.cpp $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.cpp To Bytecode"
	$(BCCompileCPP) $< -o $@ 

$(OBJDIR)/%.bc: %.c $(OBJDIR)/.dir
	@$(ECHO) "Compiling $(CONFIGURATION) $*.c To Bytecode"
	$(BCCompileC) $< -o $@

endif

$(OBJDIR)/%.bc: %.ll $(OBJDIR)/.dir $(LLVMAS)
	@$(ECHO) "Compiling $*.ll To Bytecode"
	$(VERB) $(LLVMAS) $< -f -o $@

ifdef TARGET

TDFILES := $(strip $(wildcard $(BUILD_SRC_DIR)/*.td) $(LLVM_SRC_ROOT)/lib/Target/Target.td)

$(BUILT_SOURCES): $(TDFILES) 

%GenRegisterNames.inc : %.td
	@echo "Building $(<F) register names with tblgen"
	$(VERB) $(TableGen) -gen-register-enums -o $@ $<

%GenRegisterInfo.h.inc : %.td
	@echo "Building $(<F) register information header with tblgen"
	$(VERB) $(TableGen) -gen-register-desc-header -o $@ $<

%GenRegisterInfo.inc : %.td
	@echo "Building $(<F) register info implementation with tblgen"
	$(VERB) $(TableGen) -gen-register-desc -o $@ $<

%GenInstrNames.inc : %.td
	@echo "Building $(<F) instruction names with tblgen"
	$(VERB) $(TableGen) -gen-instr-enums -o $@ $<

%GenInstrInfo.inc : %.td
	@echo "Building $(<F) instruction information with tblgen"
	$(VERB) $(TableGen) -gen-instr-desc -o $@ $<

%GenAsmWriter.inc : %.td
	@echo "Building $(<F) assembly writer with tblgen"
	$(VERB) $(TableGen) -gen-asm-writer -o $@ $<

%GenATTAsmWriter.inc : %.td
	@echo "Building $(<F) AT&T assembly writer with tblgen"
	$(VERB) $(TableGen) -gen-asm-writer -o $@ $< 

%GenIntelAsmWriter.inc : %.td
	@echo "Building $(<F) Intel assembly writer with tblgen"
	$(VERB) $(TableGen) -gen-asm-writer -asmwriternum=1 -o $@ $< 

%GenInstrSelector.inc: %.td
	@echo "Building $(<F) instruction selector with tblgen"
	$(VERB) $(TableGen) -gen-instr-selector -o $@ $< 

%GenCodeEmitter.inc:: %.td
	@echo "Building $(<F) code emitter with tblgen"
	$(VERB) $(TableGen) -gen-emitter -o $@ $<

clean-local::
	$(VERB) rm -f *.inc

endif

#
# Rules for building lex/yacc files
#
LEX_FILES   = $(filter %.l, $(SOURCES))
LEX_OUTPUT  = $(LEX_FILES:%.l=%.cpp)
YACC_FILES  = $(filter %.y, $(SOURCES))
YACC_OUTPUT = $(addprefix $(YACC_FILES:%.y=%), .h .cpp .output)
.PRECIOUS: $(LEX_OUTPUT) $(YACC_OUTPUT)

# Create a .cpp source file from a flex input file... this uses sed to cut down
# on the warnings emited by GCC...
#
# The last line is a gross hack to work around flex aparently not being able to
# resize the buffer on a large token input.  Currently, for uninitialized string
# buffers in LLVM we can generate very long tokens, so this is a hack around it.
# FIXME.  (f.e. char Buffer[10000] )
#
%.cpp: %.l
	@$(ECHO) Flexing $<
	$(VERB) $(FLEX) -t $< | \
	$(SED) '/^find_rule/d' | \
	$(SED) 's/void yyunput/inline void yyunput/' | \
	$(SED) 's/void \*yy_flex_realloc/inline void *yy_flex_realloc/' | \
	$(SED) 's/#define YY_BUF_SIZE 16384/#define YY_BUF_SIZE (16384*64)/' \
	  > $@.tmp
	$(VERB) cmp -s $@ $@.tmp > /dev/null || $(MV) -f $@.tmp $@
	@# remove the output of flex if it didn't get moved over...
	@rm -f $@.tmp

# Rule for building the bison parsers...
%.c: %.y     # Cancel built-in rules for yacc
%.h: %.y     # Cancel built-in rules for yacc
%.cpp %.h : %.y
	@$(ECHO) "Bisoning $*.y"
	$(VERB) $(BISON) -v -d -p $(<F:%Parser.y=%) -o $*.tab.c  $<
	$(VERB) cmp -s $*.tab.c $*.cpp > /dev/null || $(MV) -f $*.tab.c $*.cpp
	$(VERB) cmp -s $*.tab.h $*.h   > /dev/null || $(MV) -f $*.tab.h $*.h
	@# If the files were not updated, don't leave them lying around...
	@rm -f $*.tab.c $*.tab.h

# To create the directories...
%/.dir:
	$(VERB) $(MKDIR) $* > /dev/null
	@$(DATE) > $@

.PRECIOUS: $(OBJDIR)/.dir $(LIBDIR)/.dir $(TOOLDIR)/.dir $(LLVMLIBDIR)/.dir
.PRECIOUS: $(LLVMTOOLDIR)/.dir

# To create postscript files from dot files...
ifneq ($(DOT),false)
%.ps: %.dot
	$(DOT) -Tps < $< > $@
else
%.ps: %.dot
	$(ECHO) "Cannot build $@: The program dot is not installed"
endif

#
# This rules ensures that header files that are removed still have a rule for
# which they can be "generated."  This allows make to ignore them and
# reproduce the dependency lists.
#
%.h:: ;

# 'make clean' nukes the tree
clean-local::
	$(VERB) $(RM) -f core core.[0-9][0-9]* *.o *.d *~ *.flc
ifneq ($(strip $(SHLIBEXT)),) # Extra paranoia - make real sure SHLIBEXT is set
	$(VERB)	$(RM) -f *$(SHLIBEXT)
endif
	$(VERB) $(RM) -f $(LEX_OUTPUT) $(YACC_OUTPUT)

###############################################################################
# DEPENDENCIES: Include the dependency files if we should
###############################################################################
ifndef DISABLE_AUTO_DEPENDENCIES

# If its not one of the cleaning targets
ifneq ($strip($(filter-out clean clean-local dist-clean, $(MAKECMDGOALS))),)

# Get the list of dependency files
DependFiles := $(basename $(filter %.cpp %.c %.cc, $(SOURCES)))
DependFiles := $(patsubst %,$(BUILD_OBJ_DIR)/$(CONFIGURATION)/%.d,$(DependFiles))

-include /dev/null $(DependFiles)

endif

endif  # ifndef DISABLE_AUTO_DEPENDENCIES

################################################################################
# PRECONDITIONS - that which must be built/checked first
################################################################################

OBJMKFILE := $(BUILD_OBJ_DIR)/Makefile
SRCMKFILE := $(BUILD_SRC_DIR)/Makefile
CONFIGURE := $(LLVM_SRC_ROOT)/configure
CONFIG_STATUS := $(LLVM_OBJ_ROOT)/config.status
MAKE_CONFIG_IN := $(LLVM_SRC_ROOT)/Makefile.config.in
MAKE_CONFIG := $(LLVM_OBJ_ROOT)/Makefile.config

#------------------------------------------------------------------------
# List of the preconditions
#------------------------------------------------------------------------
preconditions: $(CONFIG_STATUS) $(MAKE_CONFIG) $(OBJMKFILE) 

all all-local check check-local dist dist-check install:: $(BUILT_SOURCES)

clean-local::
	$(VERB) $(RM) -f $(BUILT_SOURCES)

#------------------------------------------------------------------------
# Make sure we're not using a stale configuration
#------------------------------------------------------------------------
.PRECIOUS: $(CONFIG_STATUS)
$(CONFIG_STATUS): $(CONFIGURE)
	@$(ECHO) Reconfiguring with $@
	$(VERB) $(CONFIG_STATUS) --recheck

#------------------------------------------------------------------------
# Make sure the configuration makefile is up to date
#------------------------------------------------------------------------
$(MAKE_CONFIG): $(MAKE_CONFIG_IN)
	@$(ECHO) Regenerating $@
	$(VERB) cd $(LLVM_OBJ_ROOT) ; $(CONFIG_STATUS) Makefile.config
	$(VERB) $(MAKE) $(MFLAGS) $(MAKECMDGOALS)
	@exit 0;

#------------------------------------------------------------------------
# If the Makefile in the source tree has been updated, copy it over into the
# build tree. But, only do this if the source and object makefiles differ
#------------------------------------------------------------------------
ifneq ($(OBJMKFILE),$(SRCMKFILE))
.PRECIOUS: $(OBJMKFILE)
$(OBJMKFILE): $(SRCMKFILE)
	@$(ECHO) "Updating Makefile from : $(dir $<)"
	$(VERB) $(MKDIR) $(@D)
	$(VERB) cp -f $< $@
	$(VERB) $(MAKE) $(MFLAGS) $(MAKECMDGOALS)
	@exit 0;
endif

###############################################################################
# MISCELLANEOUS - utility targets
###############################################################################

#------------------------------------------------------------------------
# Print out the directories used for building
printvars::
	@$(ECHO) "BUILD_SRC_ROOT: " $(BUILD_SRC_ROOT)
	@$(ECHO) "BUILD_SRC_DIR : " $(BUILD_SRC_DIR)
	@$(ECHO) "BUILD_OBJ_ROOT: " $(BUILD_OBJ_ROOT)
	@$(ECHO) "BUILD_OBJ_DIR : " $(BUILD_OBJ_DIR)
	@$(ECHO) "LLVM_SRC_ROOT : " $(LLVM_SRC_ROOT)
	@$(ECHO) "LLVM_OBJ_ROOT : " $(LLVM_OBJ_ROOT)
	@$(ECHO) "CONFIGURATION : " $(CONFIGURATION)
	@$(ECHO) "OBJDIR: " $(OBJDIR)
	@$(ECHO) "LIBDIR: " $(LIBDIR)
	@$(ECHO) "TOOLDIR: " $(TOOLDIR)
	@$(ECHO) "TDFILES:" '$(TDFILES)'
	@$(ECHO) "Compile.CXX: " '$(Compile.CXX)'
	@$(ECHO) "Compile.C: " '$(Compile.C)'

##-----------------------------------------------------------*-Makefile-*-
## Common rules for generating, linking, and compiling via LLVM.  This is
## used to implement a robust testing framework for LLVM
##------------------------------------------------------------------------

## NOTE: This is preliminary and will change in the future


include ${LEVEL}/Makefile.common

.PHONY: clean default

# These files, which might be intermediate results, should not be deleted by
# make
.PRECIOUS: Output/%.bc  Output/%.ll
.PRECIOUS: Output/%.tbc Output/%.tll
.PRECIOUS: Output/.dir
.PRECIOUS: Output/%.llvm.bc
.PRECIOUS: Output/%.llvm

# LLVM Tool Definitions...
#
LCC      = /home/vadve/lattner/cvs/gcc_install/bin/gcc
LCC1     = /home/vadve/lattner/cvs/gcc_install/lib/gcc-lib/llvm/3.1/cc1
TOOLS    = $(BUILD_ROOT_TOP)/tools/Debug
LLI      = $(TOOLS)/lli
LLC      = $(TOOLS)/llc
LAS      = $(TOOLS)/as
LGCCAS   = $(TOOLS)/gccas
LGCCLD   = $(TOOLS)/gccld -L/home/vadve/lattner/cvs/gcc_install/lib/gcc-lib/llvm/3.1/
LDIS     = $(TOOLS)/dis 
LOPT     = $(TOOLS)/opt
LLINK    = $(TOOLS)/link
LANALYZE = $(TOOLS)/analyze

LCCFLAGS  += -O2 -Wall
LLCFLAGS =
FAILURE  = $(LEVEL)/test/Failure.sh
TESTRUNR = $(LEVEL)/test/TestRunner.sh

# Native Tool Definitions
NATGCC  = /usr/dcs/software/supported/bin/gcc
CC      = /opt/SUNWspro/bin/cc
AS	= /opt/SUNWspro/bin/cc
DIS     = /usr/ccs/bin/dis
CP	= /bin/cp -f
CFLAGS  += -g -xarch=v9


ifeq ($(TRACE), yes)
    LLCFLAGS += -trace basicblock
    LLCLIBS := -L$(LEVEL)/test/Libraries/Output -linstr64
else
    ifeq ($(TRACEM), yes)
        LLCFLAGS += -trace function
	LLCLIBS := -L$(LEVEL)/test/Libraries/Output -linstr64
    endif
endif

LLCLIBS := $(LLCLIBS) -lm

clean ::
	$(RM) a.out core
	$(RM) -rf Output/

# Compile from X.c to Output/X.ll
Output/%.ll: %.c $(LCC1) Output/.dir $(INCLUDES)
	$(LCC) $(LCCFLAGS) -S $< -o $@

# LLVM Assemble from Output/X.ll to Output/X.bc.  Output/X.ll must have come
# from GCC output, so use GCCAS.
#
Output/%.bc: Output/%.ll $(LGCCAS)
	$(LGCCAS) $< -o $@

# LLVM Assemble from X.ll to Output/X.bc.  Because we are coming directly from
# LLVM source, use the non-transforming assembler.
#
Output/%.bc: %.ll $(LAS) Output/.dir
	$(LAS) -f $< -o $@

# Compile a linked program to machine code for this processor.
#
Output/%.llc.s: Output/%.llvm.bc
	$(LLC) $(LLCFLAGS) -f $< -o $@

# Assemble (and link) an LLVM-linked program using the system assembler...
#
Output/%.llc: Output/%.llc.s
	$(CC) $(CFLAGS) $< $(LLCLIBS) -o $@

#
# Testing versions of provided utilities...
#
Output/%.tll: %.c $(LCC1) Output/.dir $(INCLUDES)
	@echo "======== Compiling $<"
	$(LCC) $(LCCFLAGS) -S $< -o $@ || \
	    ( rm -f $@; $(FAILURE) $@ )

Output/%.tbc: Output/%.tll $(LAS)
	@echo "======== Assembling $<"
	$(LAS) -f $< -o $@ || \
            ( rm -f $@; $(FAILURE) $@ )


## Cancel built-in implicit rules that override above rules
%: %.s

%: %.c

%.o: %.c


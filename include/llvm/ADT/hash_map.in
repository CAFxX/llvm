//===-- llvm/ADT/hash_map - "Portable" wrapper around hash_map --*- C++ -*-===//
// 
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
// 
//===----------------------------------------------------------------------===//
// 
// This file provides a wrapper around the mysterious <hash_map> header file
// that seems to move around between GCC releases into and out of namespaces at
// will.  #including this header will cause hash_map to be available in the
// global namespace.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_ADT_HASH_MAP
#define LLVM_ADT_HASH_MAP

// Compiler Support Matrix
//
// Version   Namespace   Header File
//  2.95.x       ::        hash_map
//  3.0.4       std      ext/hash_map
//  3.1      __gnu_cxx   ext/hash_map
//

#if @HAVE_GNU_EXT_HASH_MAP@
// This is for GCC-3.1+ which puts hash in ext/hash_map
# include <ext/hash_map>
# ifndef HASH_NAMESPACE
#  define HASH_NAMESPACE __gnu_cxx
# endif

// GCC 3.0.x puts hash_map in <ext/hash_map> and in the std namespace.
#elif @HAVE_STD_EXT_HASH_MAP@
# include <ext/hash_map>
# ifndef HASH_NAMESPACE
#  define HASH_NAMESPACE std
# endif

// Older compilers such as GCC before version 3.0 do not keep
// extensions in the `ext' directory, and ignore the `std' namespace.
#elif @HAVE_GLOBAL_HASH_MAP@
# include <hash_map>
# ifndef HASH_NAMESPACE
#  define HASH_NAMESPACE std
# endif

// Give a warning if we couldn't find it, instead of (or in addition to)
// randomly doing something dumb.
#else
# warning "Autoconfiguration failed to find the hash_map header file."
#endif

using HASH_NAMESPACE::hash_map;
using HASH_NAMESPACE::hash_multimap;
using HASH_NAMESPACE::hash;

// Include vector because ext/hash_map includes stl_vector.h and leaves
// out specializations like stl_bvector.h, causing link conflicts.
#include <vector>

#include <llvm/ADT/HashExtras.h>

#endif
